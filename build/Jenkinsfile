pipeline {
    
    agent any
    
    environment {
        DOCKERPATH="mithie/capstone"
        BUILD_VERSION_MAJOR="0"
        BUILD_VERSION_MINOR="0"
    }
    
    stages {
    
        /**
         * SETUP AND INSTALL PYTHON
         */
        stage('Setup Python Environment') {
            agent {
                docker { image 'python:3.7.3-stretch' }
            }
            steps {
                sh 'make setup'
            }
        }
        stage('Install Dependencies') {
            agent {
                docker { image 'python:3.7.3-stretch' }
            }
            steps {
                script {
                    venv('make install')
                }
            }
        }
        
        /**
         * LINT PYTHON AND DOCKER
         */
        stage('Lint Python') {
            agent {
                docker { image 'python:3.7.3-stretch' }
            }
            steps {
                script {
                    withEnv(['PYLINTHOME=.']) {
                        venv('make lint_python')
                    }
                }
            }
        }
        stage('Lint Dockerfile') {
            agent {
                docker { image 'hadolint/hadolint' }
            }
            steps {
                sh 'hadolint Dockerfile'
            }
        }
        
        /**
         * BUILD AND PUSH DOCKERFILE
         */
        stage('Build Docker') {
            environment {
                BUILD_VERSION=buildVersion("${currentBuild.number}")
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        echo "building docker image with build version ${BUILD_VERSION}"
                        sh 'docker build --tag=capstone:${BUILD_VERSION} .'
                        sh 'docker tag capstone:${BUILD_VERSION} $DOCKERPATH:${BUILD_VERSION}'
                        sh 'docker push $DOCKERPATH:${BUILD_VERSION}'
                    }
                }
            }
        }
        
        /**
         * Deploy to Kubernetes with rolling deployment strategy
         */
        stage('Deploy to Kubernetes') {
            environment {
                BUILD_VERSION=buildVersion("${currentBuild.number}")
            }
            steps {
                withEnv(['PATH+EXTRA=/var/lib/jenkins/bin']) {
                    dir("deployment") {
                        sh '''
                            echo "performin rolling update on cluster..."
                            ytt -f . -v "image=$DOCKERPATH:${BUILD_VERSION}"  > deployment-latest.yaml
                            kubectl apply -f deployment-latest.yaml
                        '''
                    }
                }
            }
        }
    }
}

def venv(String script) {
    sh ". venv/bin/activate && " + script
}

def buildVersion(String buildNumber) {
    return "v${BUILD_VERSION_MAJOR}.${BUILD_VERSION_MINOR}." + buildNumber
}